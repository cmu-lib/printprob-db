# Generated by Django 2.2.6 on 2019-10-09 14:39

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('eebo', models.PositiveIntegerField(db_index=True, editable=False, help_text='EEBO ID number', null=True)),
                ('vid', models.PositiveIntegerField(db_index=True, editable=False, help_text='Proquest ID number', null=True)),
                ('pq_title', models.CharField(db_index=True, editable=False, help_text='Title (as cataloged by EEBO)', max_length=2000)),
                ('pq_publisher', models.CharField(blank=True, editable=False, help_text='Publisher (as cataloged by EEBO)', max_length=2000)),
                ('pq_author', models.CharField(blank=True, editable=False, help_text='Author (as cataloged by EEBO)', max_length=2000)),
                ('pq_url', models.URLField(blank=True, editable=False, help_text='ProQuest URL', max_length=1000)),
                ('publisher', models.CharField(blank=True, help_text='Publisher as asserted by P&P team', max_length=2000)),
                ('pdf', models.CharField(blank=True, help_text='relative file path to root directory containing pdfs', max_length=1500)),
                ('date_early', models.DateField(db_index=True, default=datetime.date(1550, 1, 1))),
                ('date_late', models.DateField(db_index=True, default=datetime.date(1800, 12, 12))),
            ],
            options={
                'ordering': ['pq_title'],
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('sequence', models.PositiveIntegerField(db_index=True, help_text='Sequence of characters on the line')),
                ('x_min', models.PositiveIntegerField(help_text='X-axis index for the start of this character on the line image')),
                ('x_max', models.PositiveIntegerField(help_text='X-axis index for the end of this character on the line image')),
                ('class_probability', models.FloatField(db_index=True)),
            ],
            options={
                'ordering': ['created_by_run', 'line', 'sequence'],
            },
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('classname', models.CharField(help_text='A human-readable, unique class identifier', max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['classname'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('data', models.BinaryField(editable=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('sequence', models.PositiveIntegerField(db_index=True, help_text='Order on page, from top to bottom')),
                ('y_min', models.PositiveIntegerField(help_text='Y-axis index for the start of this line on the Page image')),
                ('y_max', models.PositiveIntegerField(help_text='Y-axis index for the end of this line on the Page image')),
            ],
            options={
                'ordering': ['created_by_run', 'page', 'sequence'],
            },
        ),
        migrations.CreateModel(
            name='Spread',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('sequence', models.PositiveIntegerField(db_index=True, help_text='Sequence of this page in a given book')),
                ('book', models.ForeignKey(help_text='Book to which this spread belongs', on_delete=django.db.models.deletion.CASCADE, related_name='spreads', to='pp.Book')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spreads', to='pp.Image')),
            ],
            options={
                'ordering': ('book', 'sequence'),
                'unique_together': {('book', 'sequence')},
            },
        ),
        migrations.CreateModel(
            name='PageRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('script_path', models.CharField(help_text='Filepath of the script governing this run', max_length=2000)),
                ('script_md5', models.UUIDField(help_text='md5 hash of the script (as hex digest)')),
                ('date_started', models.DateTimeField(auto_now_add=True)),
                ('params', models.CharField(max_length=1000)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pageruns', to='pp.Book')),
            ],
            options={
                'ordering': ['-date_started'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('side', models.CharField(choices=[('s', 'single'), ('l', 'left'), ('r', 'right')], help_text='Side of the spread this has been segmented to', max_length=1)),
                ('x_min', models.PositiveIntegerField(help_text='Starting x-axis location of the page on the original spread image')),
                ('x_max', models.PositiveIntegerField(help_text='Ending x-axis location of the page on the original spread image')),
                ('created_by_run', models.ForeignKey(help_text='Which pipeline run created this object instance', on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='pp.PageRun')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='pp.Image')),
                ('spread', models.ForeignKey(help_text='Spread ID this page belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='pp.Spread')),
            ],
            options={
                'ordering': ['created_by_run', 'spread', 'side'],
                'unique_together': {('created_by_run', 'spread', 'side')},
            },
        ),
        migrations.CreateModel(
            name='LineRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('script_path', models.CharField(help_text='Filepath of the script governing this run', max_length=2000)),
                ('script_md5', models.UUIDField(help_text='md5 hash of the script (as hex digest)')),
                ('date_started', models.DateTimeField(auto_now_add=True)),
                ('params', models.CharField(max_length=1000)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineruns', to='pp.Book')),
            ],
            options={
                'ordering': ['-date_started'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineGroupRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('script_path', models.CharField(help_text='Filepath of the script governing this run', max_length=2000)),
                ('script_md5', models.UUIDField(help_text='md5 hash of the script (as hex digest)')),
                ('date_started', models.DateTimeField(auto_now_add=True)),
                ('params', models.CharField(max_length=1000)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linegroupruns', to='pp.Book')),
            ],
            options={
                'ordering': ['-date_started'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('created_by_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linegroups', to='pp.LineGroupRun')),
                ('lines', models.ManyToManyField(related_name='linegroups', to='pp.Line')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linegroups', to='pp.Page')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='line',
            name='created_by_run',
            field=models.ForeignKey(help_text='Which pipeline run created this object instance', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='pp.LineRun'),
        ),
        migrations.AddField(
            model_name='line',
            name='image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='pp.Image'),
        ),
        migrations.AddField(
            model_name='line',
            name='page',
            field=models.ForeignKey(help_text='Page ID of this line', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='pp.Page'),
        ),
        migrations.CreateModel(
            name='CharacterRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default='', editable=False, max_length=200)),
                ('script_path', models.CharField(help_text='Filepath of the script governing this run', max_length=2000)),
                ('script_md5', models.UUIDField(help_text='md5 hash of the script (as hex digest)')),
                ('date_started', models.DateTimeField(auto_now_add=True)),
                ('params', models.CharField(max_length=1000)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characterruns', to='pp.Book')),
            ],
            options={
                'ordering': ['-date_started'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterGrouping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('label', models.CharField(help_text='A descriptive label (will appear in menus etc)', max_length=200, unique=True)),
                ('notes', models.TextField(blank=True, help_text='A description or notes about the grouping', max_length=10000)),
                ('characters', models.ManyToManyField(blank=True, related_name='charactergroupings', to='pp.Character')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charactergroupings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_by', '-date_created'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='character',
            name='character_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_to', to='pp.CharacterClass'),
        ),
        migrations.AddField(
            model_name='character',
            name='created_by_run',
            field=models.ForeignKey(help_text='Which pipeline run created this object instance', on_delete=django.db.models.deletion.CASCADE, related_name='characters', to='pp.CharacterRun'),
        ),
        migrations.AddField(
            model_name='character',
            name='human_character_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='human_assigned_to', to='pp.CharacterClass'),
        ),
        migrations.AddField(
            model_name='character',
            name='image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characters', to='pp.Image'),
        ),
        migrations.AddField(
            model_name='character',
            name='line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characters', to='pp.Line'),
        ),
        migrations.AlterUniqueTogether(
            name='line',
            unique_together={('created_by_run', 'page', 'sequence')},
        ),
        migrations.AlterUniqueTogether(
            name='character',
            unique_together={('created_by_run', 'line', 'sequence')},
        ),
    ]
